/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Idea } from "./Idea";
import { IdeaCountArgs } from "./IdeaCountArgs";
import { IdeaFindManyArgs } from "./IdeaFindManyArgs";
import { IdeaFindUniqueArgs } from "./IdeaFindUniqueArgs";
import { DeleteIdeaArgs } from "./DeleteIdeaArgs";
import { IdeaService } from "../idea.service";
@graphql.Resolver(() => Idea)
export class IdeaResolverBase {
  constructor(protected readonly service: IdeaService) {}

  async _ideasMeta(
    @graphql.Args() args: IdeaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Idea])
  async ideas(@graphql.Args() args: IdeaFindManyArgs): Promise<Idea[]> {
    return this.service.ideas(args);
  }

  @graphql.Query(() => Idea, { nullable: true })
  async idea(@graphql.Args() args: IdeaFindUniqueArgs): Promise<Idea | null> {
    const result = await this.service.idea(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Idea)
  async deleteIdea(@graphql.Args() args: DeleteIdeaArgs): Promise<Idea | null> {
    try {
      return await this.service.deleteIdea(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
